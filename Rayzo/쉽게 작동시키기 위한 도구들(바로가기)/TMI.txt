node.js 
    Current: 최신 버전
    LTS: 안정 버전(Long Term Service)

module?
    독립된 기능을 갖는 것들의 모임(ex)함수, 파일)
    -> 유지 & 보수가 쉬움
    생성 시 exports 전역 객체 사용
    호출 시 require() method 사용


module의 종류
    외장 모듈
        일반 Node.js 개발자들이 만든 모듈
        NPM(node Package Manager) 사용
    내장 모듈
        Node.js 설치시 제공되어지는 모듈
        NPM 사용 X

module 생성 방법
    export에 직접 프로퍼티 설정                         (lose)
    새로운 객체에 프로퍼티 설정 후 module.export에 할당 (win!)

Express?
    node는 프레임 워크를 사용해 개발 가능
    (Express, Koa, Hapi 등)

Express 프레임워크 생성 (스켈레톤)
    npm install -g express-generator

프로젝트 생성
    express projectName (--view=ejs, 기본값 jade)
        ejs
            tag를 통해 html 문서 작성
            <% %> or <%= %> 사용해 서버가 전달해준 값 사용가능
        jade
            들여쓰기 방식으로 html 문서 작성
    cd projectName
    npm install
    ...
    npm start

router.get()
    첫 번째 인자 -> 요청 URL을 정의
    두 번째 인자 -> callback function 요청 객체인 req,
    응답 객체인 res가 정의되어 있음
    응답할 페이지(index)를 렌더링 하기 위해,
    render() 메서드를 호출
    render() 메서드를 호출 할 때, 렌더링 할 페이지
    경로와 함께 동적으로 처리할 변수를 프로퍼티로 하여
    객체를 전달 -> index.ejs 파일에 있는 <%= title %>에 Express가 값으로 할당된 것

? render('index' , ...)했는데 어캐 view 폴더에 있는지 앎?
    app.js 파일에서 기본 view폴더를 view로 지정했기 때문
    app.set('views', path.join(__dirname, 'views'));
    app.set('view engine', 'ejs');

미들웨어
    자기 수행할 부분 수행한 후 진행을 넘김
    미들웨어를 사용하는 이유는 어떤 미들웨어에서 req, res 객체에 속성 또는 메서드를 추가했을 때,
    다른 미들웨어서도 이전 미들웨어에서 추가한 req, res 객체의 속성 또는 메서드를 사용할 수 있기 때문
    npm start -> 서버가 실행 -> app.js에서 등록된 미들웨어들이 수행
    -> /routes/index.js 파일의 router 미들웨어에서는 app.js에서 req, res 객체에 추가했던 프로퍼티, 메서드들을 사용할 수 있게 됨.

res, req object
    res object method
        send([body])
        status([상태코드]).sedn([body])
        json([body])
        redirect([body])

    req object method
        params()
        query()
        headers()
        header()
        accepts(type)
        is(type)